#!/usr/bin/env node
const program = require('../lib/program')

program
.option('-p, --wikipedia', 'open the Wikipedia article')
.option('-y, --history', 'open the Wikidata history')
.option('-u, --url', 'simply generate the url')
.option('-r, --revision <id>', 'open a specific revision')
.process('open')

const getSitelinkUrl = require('../lib/get_sitelink_url')(program)
const parseId = require('../lib/tolerant_id_parser')
const copy = require('../lib/copy')
const open = require('open')

const { instance } = program
if (!instance) throw new Error('no instance set')

const { args, lang } = program

var ids
try {
  ids = args.map(parseId).filter(id => id != null)
} catch (err) {
  // invalid ids: trigger a search
}

const { url: urlOnly, clipboard } = program

const handle = url => {
  if (urlOnly) {
    clipboard ? copy(url) : console.log(url)
  } else {
    if (clipboard) copy(url)
    open(url, { url: true })
  }
}

if (!ids || ids.length === 0) {
  const search = encodeURIComponent(args.join(' '))
  if (program.wikipedia) {
    handle(`https://${lang}.wikipedia.org/w/index.php?title=Special:Search&search=${search}`)
  } else {
    handle(`${instance}/w/index.php?title=Special:Search&search=${search}`)
  }
} else {
  const openId = async id => {
    if (program.wikipedia) {
      try {
        const url = await getSitelinkUrl(id, lang, 'wiki')
        handle(url)
      } catch (err) {
        if (err.statusCode === 404) {
          console.error('Wikipedia article not found: opening Wikidata page on sitelinks')
          handle(`${instance}/wiki/${id}#sitelinks-wikipedia`)
        } else {
          throw err
        }
      }
    } else if (program.history) {
      handle(`${instance}/w/index.php?title=${id}&action=history`)
    } else if (program.revision) {
      handle(`${instance}/w/index.php?title=${id}&oldid=${program.revision}`)
    } else {
      handle(`${instance}/entity/${id}`)
    }
  }

  ids.forEach(openId)
}
